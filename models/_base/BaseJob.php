<?php
namespace eurojet\job\models\_base;

use yii\data\ActiveDataProvider;
use yii\db\ActiveRecord;

/**
 * This is the model base class for the table "job".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Job".
 *
 * Columns in table "job" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $token
 * @property string $job_class
 * @property string $job_data
 * @property string $crontab
 * @property string $planned_time
 * @property string $start_time
 * @property integer $job_status_id
 * @property integer $job_origin_id
 * @property string $create_time
 * @property string $update_time
 * @property string $queue
 * @property integer $progress
 * @property string $identifier1
 * @property string $identifier2
 * @property string $identifier3
 * @property string $identifier4
 *
 */
abstract class BaseJob extends ActiveRecord {



    public static function tableName() {
        return 'Job';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'Job|Jobs', $n);
    }

    public static function representingColumn() {
        return 'token';
    }

    public function rules()
    {
        return [
            [['job_class', 'planned_time', 'job_status_id'], 'required'],
            [['job_data'], 'string'],
            [['planned_time', 'start_time', 'create_time', 'update_time'], 'safe'],
            [['job_status_id'], 'integer'],
            [['job_class'], 'string', 'max' => 64],
            [['crontab'], 'string', 'max' => 128]
        ];
    }


    public function relations() {
        return array(
        );
    }

    public function pivotModels() {
        return array(
        );
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'z_PRIMARY_KEY' => 'ID',
            'job_class' => 'Job Class',
            'job_data' => 'Job Data',
            'crontab' => 'Crontab',
            'planned_time' => 'Planned Time',
            'start_time' => 'Start Time',
            'job_status_id' => 'Job Status',
            'create_time' => 'Create Time',
            'update_time' => 'Update Time',
        ];
    }


    public function search($params)
    {
        //alias is needed to support foreign keys of the same model such as $_z_Parent_ID
        $query = self::find();
        $query->select(['`Job`.`z_PRIMARY_KEY`','`Job`.`job_class`','`Job`.`job_data`','`Job`.`crontab`','`Job`.`planned_time`','`Job`.`start_time`','`Job`.`job_status_id`','`Job`.`create_time`','`Job`.`update_time`',\common\models\Job::labelDef('Job').' label']);

        // add conditions that should always apply here


        // here join with relations name that are needed for sorting/filtering


        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        // add sorting for related fields by public property key


        $this->load($params);

        if (!$this->validate()) {
            // uncomment the following line if you do not want to return any records when validation fails
            // $query->where('0=1');
            return $dataProvider;
        }

        // grid filtering conditions
        $query->andFilterWhere(['like', '`Job`.`z_PRIMARY_KEY`', $this->z_PRIMARY_KEY])
            ->andFilterWhere(['like', '`Job`.`job_class`', $this->job_class])
            ->andFilterWhere(['like', '`Job`.`job_data`', $this->job_data])
            ->andFilterWhere(['like', '`Job`.`crontab`', $this->crontab])
            ->andFilterWhere(['like', '`Job`.`planned_time`', $this->planned_time])
            ->andFilterWhere(['like', '`Job`.`start_time`', $this->start_time])
            ->andFilterWhere(['like', '`Job`.`job_status_id`', $this->job_status_id])
            ->andFilterWhere(['like', '`Job`.`create_time`', $this->create_time])
            ->andFilterWhere(['like', '`Job`.`update_time`', $this->update_time]);


        return $dataProvider;
    }
}
